#!/usr/bin/env python3

import sys
import argparse
import subprocess

from i3ipc import Connection

# Place your preferred icon name (or path) here. Leave empty ("") for no icon.
icon_balanced = "/home/anthony/.local/share/icons/power-profile-balanced.svg"
icon_perfomance = "/home/anthony/.local/share/icons/power-profile-performance.svg"
icon_power_saver = "/home/anthony/.local/share/icons/power-profile-power-saver.svg"

profile_to_icon = {
    'accelerator-performance': icon_perfomance,
    'balanced': icon_balanced,
    'balanced-battery': icon_balanced,
    'powersave': icon_power_saver
}
profile_to_next_profile = {
    'accelerator-performance': 'powersave',
    'balanced': 'accelerator-performance',
    'balanced-battery': 'accelerator-performance',
    'powersave': 'balanced'
}

# The number of the signal to refresh the executor label, in range SIGTRMIN - SIGRTMAX (probably 34 - 64).
# You may check available range with `kill -l`.
sig_num = 39

i3 = Connection()

def get_current_profile():
    try:
        output = subprocess.check_output(["tuned-adm","active"])
    except subprocess.CalledProcessError as e:
        print("Error!")
    output_splitted = output.decode().split(" ")
    active_profile = output_splitted[-1].replace("\n", "")
    return active_profile

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s",
                        "--switch",
                        action="store_true",
                        help="prevents/permit the system from entering an idle state")
    args = parser.parse_args()

    if args.switch:
        current_profile = get_current_profile()
        next_profile = profile_to_next_profile[current_profile]
        subprocess.run("tuned-adm profile {}".format(next_profile), shell=True)
        # Send refresh signal to nwg-panel
        subprocess.Popen('pkill -{} nwg-panel'.format(sig_num), shell=True,
                         stdout=subprocess.DEVNULL,
                         stderr=subprocess.STDOUT)
        sys.exit(0)

    icon = icon_balanced
    output = get_current_profile()
    output_splitted = output.split(" ")
    active_profile = output_splitted[-1]
    icon = profile_to_icon[active_profile]

    print("{}".format(icon))


if __name__ == '__main__':
    main()

